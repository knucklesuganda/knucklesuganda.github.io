{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Assimilator - the best Python patterns for the best projects","text":""},{"location":"#install-now","title":"Install now","text":"<ul> <li><code>pip install py-assimilator</code></li> <li><code>pip install py-assimilator[alchemy]</code> - Optional SQLAlchemy support </li> <li><code>pip install py-assimilator[kafka]</code> - Optional Kafka support </li> <li><code>pip install py-assimilator[redis]</code> - Optional Redis support </li> <li><code>pip install py-assimilator[mongo]</code> - Optional MongoDB support </li> </ul>"},{"location":"#simple-example","title":"Simple example","text":"<p>Example usage of the code to create a user using all the DDD patterns:</p> <pre><code>from assimilator.alchemy.database import AlchemyUnitOfWork, AlchemyRepository\nfrom assimilator.core.database import UnitOfWork\n\ndef create_user(username: str, email: str, uow: UnitOfWork):\n    with uow:\n        repository = uow.repository     # Get Repository pattern\n        new_user = repository.save(username=username, email=email, balance=0)\n        uow.commit()    # Securely save the data\n\n    return new_user\n\n\nuser_repository = AlchemyRepository(\n    session=alchemy_session,    # alchemy db session\n    model=User,     # alchemy user model \n)\nuser_uow = AlchemyUnitOfWork(repository=user_repository)\n\ncreate_user(\n    username=\"Andrey\", \n    email=\"python.on.papyrus@gmail.com\",\n    uow=user_uow,\n)\n\n</code></pre>"},{"location":"#why-do-i-need-it","title":"Why do I need it?","text":"<p>Patterns are very useful for good code, but only to some extent. Most of them are not suitable for  real life applications. DDD(Domain-driven design) is one of the most popular ways of development today, but nobody explains how to write most of DDD patterns in Python. Even if they do, life gives you another issue that cannot be solved with a simple algorithm. That is why Andrey created a library for the patterns that he uses in his projects daily.</p> <p></p> <p>Watch our Demo to find out more about pyAssimilator capabilities.</p>"},{"location":"#sources","title":"Sources","text":"<ul> <li>Github</li> <li>PyPI</li> <li>Documentation</li> <li>Github</li> <li>Author's YouTube RU</li> <li>Author's YouTube ENG</li> </ul>"},{"location":"#video-tutorials","title":"Video tutorials","text":"<p>There are also video tutorials that help you get everything you need to know about the library.</p>"},{"location":"#stars-history","title":"Stars history","text":""},{"location":"#types-of-patterns","title":"Types of patterns","text":"<p>These are different use cases for the patterns implemented:</p> <ul> <li>Database - patterns for database/data layer interactions.</li> <li>Events(in development) - projects with events or event-driven architecture.</li> <li>Unidentified - patterns that are useful for different purposes.</li> </ul>"},{"location":"#available-providers","title":"Available providers","text":"<p>Providers are different patterns for external modules like SQLAlchemy or FastAPI.</p> <ul> <li>Alchemy(Database, Events) - patterns for SQLAlchemy for both database and events.</li> <li>Kafka(Events) - patterns in Kafka related to events.</li> <li>Internal(Database, Events) - internal is the type of provider that saves everything in memory(dict, list and all the tools within your app).</li> <li>Redis(Database, Events) - redis_ allows us to work with Redis memory database.</li> <li>MongoDB(Database) - mongo allows us to work with MongoDB database.</li> </ul>"}]}